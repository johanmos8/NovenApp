package com.mirkwood.novenapp.presentation

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.navigation.NavController
import com.google.gson.Gson
import com.mirkwood.novenapp.presentation.model.Novena
import com.mirkwood.novenapp.presentation.navigation.NavigationScreen
import com.mirkwood.novenapp.presentation.state.NovenaViewState
import com.mirkwood.novenapp.presentation.util.INITIAL_DAY
import com.mirkwood.novenapp.presentation.util.LAST_DAY
import com.mirkwood.novenapp.presentation.util.TARGET_MONTH
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import java.time.LocalDate

internal class MainViewModel : ViewModel() {

    private val _state = MutableStateFlow(NovenaViewState())
    val state: StateFlow<NovenaViewState> = _state.asStateFlow()

    init {
        getNovenaDay()
    }

    fun getContent(context: Context): Novena {
        val json = loadJSONFromAsset(context, "content.json")
        return Gson().fromJson(json, Novena::class.java)
    }

    private fun loadJSONFromAsset(context: Context, fileName: String): String? {
        return try {
            val inputStream = context.assets.open(fileName)
            val size = inputStream.available()
            val buffer = ByteArray(size)
            inputStream.read(buffer)
            inputStream.close()
            String(buffer, Charsets.UTF_8)
        } catch (ex: Exception) {
            ex.printStackTrace()
            null
        }
    }

    fun getNovenaDay(): Int? {
        val today = LocalDate.now()
        val start = LocalDate.of(today.year, TARGET_MONTH, INITIAL_DAY)
        val end = LocalDate.of(today.year, TARGET_MONTH, LAST_DAY)
        val value = if (today in start..end) {
            // Calculamos el día basado en el rango
            (today.dayOfMonth - start.dayOfMonth + 1)
        } else {
            null // Retornamos null si la fecha no está en el rango
        }
        _state.value = _state.value.copy(currentDay = value)
        return value
    }

    fun onAction(action: NovenaAction, navController: NavController) {
        when (action) {
            NovenaAction.GoHome -> {
                navController.navigate(NavigationScreen.HomeScreen.route) // Regresar a Home
            }

            is NovenaAction.GoToDay -> {
                navController.navigate(NavigationScreen.DayScreen.createRoute(action.selectedDay))

            }
        }
    }


}
